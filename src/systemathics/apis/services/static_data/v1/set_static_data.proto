// Copyright (c) 2021 Systemathics
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Reference data encompasses a wide range of specification data about:
// <br>- financial instrument such as asset class, symbol, maturity, etc.
// <br>- counterparties such as issuer information.
// <br>- pricing such as open, high low and close prices.
// <br>- The challenge with reference data is that it tends to be sourced from multiple sources: internal, counterparties and providers.
// <br>- Reference data dedicated service is a result of various data sources and fields sourcing, validation, cross-checking and normalization.
syntax = "proto3";


import "google/api/annotations.proto";
import "google/type/datetime.proto";
import "google/type/date.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

import "systemathics/apis/services/static_data/v1/static_data.proto";

package systemathics.apis.services.static_data.v1;

// Called to set static data.
service SetStaticDataService
{
  // Creates Option Static data from OTC Streaming
  rpc CreateStaticDataOtcStreaming(CreateStaticDataOtcStreamingRequest) returns (StaticDataOtcStreamingResponse)
  {
          option (google.api.http) = {
            post: "/v1/staticdata/otc_streaming"
        };
  }


  // Get Option Static data from OTC Streaming by Id
  rpc GetStaticDataOtcStreaming(SingleStaticDataOtcStreamingRequest) returns (StaticDataOtcStreamingResponse)
  {
          option (google.api.http) = {
            post: "/v1/staticdata/otc_streaming/{id}"
        };
  }

  // Get all Option Static data from OTC Streaming
  rpc GetAllStaticDataOtcStreaming(google.protobuf.Empty) returns (stream StaticDataOtcStreamingResponse)
  {
          option (google.api.http) = {
            get: "/v1/staticdata/otc_streaming"
        };
  }

  // Update Option Static data from OTC Streaming by Id
  rpc UpdateStaticDataOtcStreaming(UpdateStaticDataOtcStreamingRequest) returns (StaticDataOtcStreamingResponse)
  {
        option (google.api.http) = {
            put: "/v1/staticdata/otc_streaming/{id}"
        };
  }

  // Get Option Static data from OTC Streaming by Id
  rpc DeleteStaticDataOtcStreaming(SingleStaticDataOtcStreamingRequest) returns (google.protobuf.Empty)
  {
          option (google.api.http) = {
            delete: "/v1/staticdata/otc_streaming/{id}"
        };
  }
}


message SingleStaticDataOtcStreamingRequest
{
    // [Mandatory] The Id of the static data to delete.
    int64 id = 1;
}


// Static data update message message for OTC Streaming data
message UpdateStaticDataOtcStreamingRequest
{
    // [Mandatory] The Id of the static data to delete
    int64 id = 1;

    // [Optional] Bloomberg Ticker. Set it only if it needs to be modified.
    string ticker = 2;

    // [Optional] Provider, usually the bank contributing. Set it only if it needs to be modified.
    string provider = 3;

    // [Optional] Strike of the option. Set it only if it needs to be modified.
    google.protobuf.DoubleValue strike = 4;

    // [Optional] Swaption type (Payer or Receiver). Set it only if it needs to be modified.
    SwaptionType swaption_type = 5;

    // [Optional] Expiry date or maturity date of the option. Set it only if it needs to be modified.
    google.type.Date expiry = 6;

    // [Optional] Bloomberg Ticker of the underlying. Set it only if it needs to be modified.
    string underlying_ticker = 7;

    // [Optional] Currency of the option. Set it only if it needs to be modified.
    string currency = 8;

    // [Optional] Markit Id of the option. Set it only if it needs to be modified.
    string markit_id = 9;

    // [Optional] FIGI code of the option. Set it only if it needs to be modified.
    string figi = 10;

    // [Optional] Trading calendar the option. Set it only if it needs to be modified.
    string calendar = 11;
}

// Static data creation message for OTC Streaming data
message CreateStaticDataOtcStreamingRequest
{
    // [Mandatory] Bloomberg Ticker 
    string ticker = 1;

    // [Mandatory] Provider, usually the bank contributing
    string provider = 2;

    // [Mandatory] Strike of the option
    double strike = 3;

    // [Mandatory] Swaption type (Payer or Receiver)
    SwaptionType swaption_type = 4;

    // [Mandatory] Expiry date or maturity date of the option.
    google.type.Date expiry = 5;

    // [Mandatory] Bloomberg Ticker of the underlying
    string underlying_ticker = 6;

    // [Mandatory] Currency of the option
    string currency = 7;

    // [Optional] Markit Id of the option
    string markit_id = 8;

    // [Optional] FIGI code of the option
    string figi = 9;

    // [Optional] Trading calendar the option
    string calendar = 10;
}


message StaticDataOtcStreamingResponse
{
    // The Id of the static data
    int64 id = 1;

    // Creation date
    google.type.DateTime creation_date = 2;

    // Update date
    google.type.DateTime update_date = 3;

    // Bloomberg Ticker 
    string ticker = 4;

    // The Provider, usually the bank contributing
    string provider = 5;

    // The Strike of the option
    double strike = 6;

    // The Swaption type (Payer or Receiver)
    SwaptionType swaption_type = 7;

    // The expiry date or maturity date of the option.
    google.type.Date expiry = 8;

    // The Bloomberg Ticker of the underlying
    string underlying_ticker = 9;

    // The Currency of the option
    string currency = 10;

    // The Markit Id of the option
    string markit_id = 11;

    // FIGI code of the option
    string figi = 12;

    // Trading calendar the option
    string calendar = 13;
}
